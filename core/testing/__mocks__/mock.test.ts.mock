export const mock = {};

mock[`mock() mocks a function > original 1`] =
[
  {
    input: [
      2,
      4,
    ],
    output: 6,
  },
  {
    input: [
      3,
      5,
    ],
    output: 8,
  },
];

mock[`mock() mocks an arrow function > original 1`] =
[
  {
    input: [
      2,
      4,
    ],
    output: 6,
  },
  {
    input: [
      3,
      5,
    ],
    output: 8,
  },
];

mock[`mock() mocks a class method > original 1`] =
[
  {
    input: [
      4,
    ],
    output: 6,
  },
  {
    input: [
      5,
    ],
    output: 7,
  },
];

mock[`mock() implements spy like interface > original 1`] =
[
  {
    input: [
      2,
      4,
    ],
    output: 6,
  },
];

mock[`mock() matches arguments > func 1`] =
[
  {
    input: [],
    output: undefined,
  },
  {
    input: [
      1,
    ],
    output: 1,
  },
  {
    input: [
      2,
    ],
    output: 2,
  },
  {
    input: [
      2,
    ],
    output: 2,
  },
  {
    input: [
      1,
      2,
    ],
    output: 1,
  },
  {
    input: [
      undefined,
    ],
    output: undefined,
  },
  {
    input: [
      undefined,
      2,
    ],
    output: 2,
  },
  {
    input: [
      undefined,
      2,
    ],
    output: 2,
  },
  {
    input: [
      undefined,
      2,
      undefined,
    ],
    output: 2,
  },
];

mock[`mock() can convert input > func 1`] =
[
  {
    input: [
      "HELLO",
    ],
    output: "hello",
  },
];

mock[`mock() can convert output > func 1`] =
[
  {
    input: [
      "hello",
    ],
    output: "HELLO",
  },
];

mock[`mock() can revert output > func 1`] =
[
  {
    input: [
      "HELLO",
    ],
    output: "HELLO",
  },
];

mock[`mock() can store modified input > pop 1`] =
[
  {
    input: [
      [
        1,
        2,
        3,
      ],
    ],
    output: [
      1,
      2,
    ],
  },
];

mock[`mock() can store consumable input > body 1`] =
[
  {
    input: [
      "body",
    ],
    output: "body",
  },
];

mock[`mock() can store consumable output > resp 1`] =
[
  {
    input: [
      "body",
    ],
    output: "body",
  },
];

mock[`mock() checks call not replayed > func 1`] =
[
  {
    input: [],
    output: undefined,
  },
  {
    input: [],
    output: undefined,
  },
];

mock[`mock() disposes silently after missing call > func 1`] =
[
  {
    input: [
      2,
    ],
    output: 2,
  },
];

mock[`custom name`] =
[
  {
    input: [],
    output: 42,
  },
];

mock[`mock() can mock multiple functions > func1 1`] =
[
  {
    input: [],
    output: 1,
  },
];

mock[`mock() can mock multiple functions > func2 1`] =
[
  {
    input: [],
    output: 2,
  },
];

mock[`mock() can use test step context > first > func 1`] =
[
  {
    input: [],
    output: 42,
  },
];

mock[`mock() can use test step context > second > func 1`] =
[
  {
    input: [],
    output: 24,
  },
];

mock[`mock() can mock a function multiple times > func 1`] =
[
  {
    input: [],
    output: 42,
  },
];

mock[`mock() can mock a function multiple times > func 2`] =
[
  {
    input: [],
    output: 42,
  },
];

mock[`mock() can mock a function multiple times > func 3`] =
[
  {
    input: [],
    output: 42,
  },
];
